
TMUM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000009f6  00000a8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800082  00800082  00000aac  2**0
                  ALLOC
  3 .stab         00000f60  00000000  00000000  00000aac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e90  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 84 02 	jmp	0x508	; 0x508 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ac 04 	call	0x958	; 0x958 <main>
  8a:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WritePin>:
#include "DIO.h"

void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <DIO_WritePin+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	6a 83       	std	Y+2, r22	; 0x02

if(PinNum < 8)
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	60 f5       	brcc	.+88     	; 0xfe <DIO_WritePin+0x6c>
{
	if(PinValue)
  a6:	8a 81       	ldd	r24, Y+2	; 0x02
  a8:	88 23       	and	r24, r24
  aa:	a1 f0       	breq	.+40     	; 0xd4 <DIO_WritePin+0x42>
	{
		Set_Bit(PORTA,PinNum);
  ac:	ab e3       	ldi	r26, 0x3B	; 59
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	eb e3       	ldi	r30, 0x3B	; 59
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	48 2f       	mov	r20, r24
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	28 2f       	mov	r18, r24
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 2e       	mov	r0, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_WritePin+0x38>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_WritePin+0x34>
  ce:	84 2b       	or	r24, r20
  d0:	8c 93       	st	X, r24
  d2:	bc c0       	rjmp	.+376    	; 0x24c <DIO_WritePin+0x1ba>
	}
	else
	{
		Clear_Bit(PORTA,PinNum);
  d4:	ab e3       	ldi	r26, 0x3B	; 59
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	eb e3       	ldi	r30, 0x3B	; 59
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	48 2f       	mov	r20, r24
  e0:	89 81       	ldd	r24, Y+1	; 0x01
  e2:	28 2f       	mov	r18, r24
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 2e       	mov	r0, r18
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_WritePin+0x60>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	0a 94       	dec	r0
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_WritePin+0x5c>
  f6:	80 95       	com	r24
  f8:	84 23       	and	r24, r20
  fa:	8c 93       	st	X, r24
  fc:	a7 c0       	rjmp	.+334    	; 0x24c <DIO_WritePin+0x1ba>
	}
}

else if(PinNum > 7 && PinNum < 16)
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	88 30       	cpi	r24, 0x08	; 8
 102:	a8 f1       	brcs	.+106    	; 0x16e <DIO_WritePin+0xdc>
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	80 31       	cpi	r24, 0x10	; 16
 108:	90 f5       	brcc	.+100    	; 0x16e <DIO_WritePin+0xdc>
{
	if(PinValue)
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	88 23       	and	r24, r24
 10e:	b9 f0       	breq	.+46     	; 0x13e <DIO_WritePin+0xac>
	{
		Set_Bit(PORTB,(PinNum)-8);
 110:	a8 e3       	ldi	r26, 0x38	; 56
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	e8 e3       	ldi	r30, 0x38	; 56
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	48 2f       	mov	r20, r24
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	88 2f       	mov	r24, r24
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	9c 01       	movw	r18, r24
 124:	28 50       	subi	r18, 0x08	; 8
 126:	30 40       	sbci	r19, 0x00	; 0
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 2e       	mov	r0, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_WritePin+0xa2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	0a 94       	dec	r0
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_WritePin+0x9e>
 138:	84 2b       	or	r24, r20
 13a:	8c 93       	st	X, r24
 13c:	87 c0       	rjmp	.+270    	; 0x24c <DIO_WritePin+0x1ba>
	}
	else
	{
		Clear_Bit(PORTB,(PinNum)-8);
 13e:	a8 e3       	ldi	r26, 0x38	; 56
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	e8 e3       	ldi	r30, 0x38	; 56
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	48 2f       	mov	r20, r24
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	88 2f       	mov	r24, r24
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	9c 01       	movw	r18, r24
 152:	28 50       	subi	r18, 0x08	; 8
 154:	30 40       	sbci	r19, 0x00	; 0
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 2e       	mov	r0, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_WritePin+0xd0>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_WritePin+0xcc>
 166:	80 95       	com	r24
 168:	84 23       	and	r24, r20
 16a:	8c 93       	st	X, r24
 16c:	6f c0       	rjmp	.+222    	; 0x24c <DIO_WritePin+0x1ba>
	}
}

else if(PinNum > 15 && PinNum < 24)
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	80 31       	cpi	r24, 0x10	; 16
 172:	a8 f1       	brcs	.+106    	; 0x1de <DIO_WritePin+0x14c>
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	88 31       	cpi	r24, 0x18	; 24
 178:	90 f5       	brcc	.+100    	; 0x1de <DIO_WritePin+0x14c>
{
	if(PinValue)
 17a:	8a 81       	ldd	r24, Y+2	; 0x02
 17c:	88 23       	and	r24, r24
 17e:	b9 f0       	breq	.+46     	; 0x1ae <DIO_WritePin+0x11c>
	{
		Set_Bit(PORTC,(PinNum)-16);
 180:	a5 e3       	ldi	r26, 0x35	; 53
 182:	b0 e0       	ldi	r27, 0x00	; 0
 184:	e5 e3       	ldi	r30, 0x35	; 53
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	48 2f       	mov	r20, r24
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	88 2f       	mov	r24, r24
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	9c 01       	movw	r18, r24
 194:	20 51       	subi	r18, 0x10	; 16
 196:	30 40       	sbci	r19, 0x00	; 0
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 2e       	mov	r0, r18
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_WritePin+0x112>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_WritePin+0x10e>
 1a8:	84 2b       	or	r24, r20
 1aa:	8c 93       	st	X, r24
 1ac:	4f c0       	rjmp	.+158    	; 0x24c <DIO_WritePin+0x1ba>
	}
	else
	{
		Clear_Bit(PORTC,(PinNum)-16);
 1ae:	a5 e3       	ldi	r26, 0x35	; 53
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	e5 e3       	ldi	r30, 0x35	; 53
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	48 2f       	mov	r20, r24
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	88 2f       	mov	r24, r24
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	9c 01       	movw	r18, r24
 1c2:	20 51       	subi	r18, 0x10	; 16
 1c4:	30 40       	sbci	r19, 0x00	; 0
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 2e       	mov	r0, r18
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_WritePin+0x140>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	0a 94       	dec	r0
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_WritePin+0x13c>
 1d6:	80 95       	com	r24
 1d8:	84 23       	and	r24, r20
 1da:	8c 93       	st	X, r24
 1dc:	37 c0       	rjmp	.+110    	; 0x24c <DIO_WritePin+0x1ba>
	}
}

else if(PinNum > 23 && PinNum < 32)
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	88 31       	cpi	r24, 0x18	; 24
 1e2:	a0 f1       	brcs	.+104    	; 0x24c <DIO_WritePin+0x1ba>
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
 1e6:	80 32       	cpi	r24, 0x20	; 32
 1e8:	88 f5       	brcc	.+98     	; 0x24c <DIO_WritePin+0x1ba>
{
	if(PinValue)
 1ea:	8a 81       	ldd	r24, Y+2	; 0x02
 1ec:	88 23       	and	r24, r24
 1ee:	b9 f0       	breq	.+46     	; 0x21e <DIO_WritePin+0x18c>
	{
		Set_Bit(PORTD,(PinNum)-24);
 1f0:	a2 e3       	ldi	r26, 0x32	; 50
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	e2 e3       	ldi	r30, 0x32	; 50
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	48 2f       	mov	r20, r24
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	88 2f       	mov	r24, r24
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	9c 01       	movw	r18, r24
 204:	28 51       	subi	r18, 0x18	; 24
 206:	30 40       	sbci	r19, 0x00	; 0
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 2e       	mov	r0, r18
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_WritePin+0x182>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	0a 94       	dec	r0
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_WritePin+0x17e>
 218:	84 2b       	or	r24, r20
 21a:	8c 93       	st	X, r24
 21c:	17 c0       	rjmp	.+46     	; 0x24c <DIO_WritePin+0x1ba>
	}
	else
	{
		Clear_Bit(PORTD,(PinNum)-24);
 21e:	a2 e3       	ldi	r26, 0x32	; 50
 220:	b0 e0       	ldi	r27, 0x00	; 0
 222:	e2 e3       	ldi	r30, 0x32	; 50
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	48 2f       	mov	r20, r24
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	88 2f       	mov	r24, r24
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	9c 01       	movw	r18, r24
 232:	28 51       	subi	r18, 0x18	; 24
 234:	30 40       	sbci	r19, 0x00	; 0
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 2e       	mov	r0, r18
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_WritePin+0x1b0>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	0a 94       	dec	r0
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_WritePin+0x1ac>
 246:	80 95       	com	r24
 248:	84 23       	and	r24, r20
 24a:	8c 93       	st	X, r24
	}

}
}
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	cf 91       	pop	r28
 252:	df 91       	pop	r29
 254:	08 95       	ret

00000256 <DIO_ReadPin>:


uint8 DIO_ReadPin(uint8 PinNum)
{
 256:	df 93       	push	r29
 258:	cf 93       	push	r28
 25a:	00 d0       	rcall	.+0      	; 0x25c <DIO_ReadPin+0x6>
 25c:	0f 92       	push	r0
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
 262:	89 83       	std	Y+1, r24	; 0x01
if(PinNum < 8)
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	88 30       	cpi	r24, 0x08	; 8
 268:	90 f4       	brcc	.+36     	; 0x28e <DIO_ReadPin+0x38>
{
	return Get_Bit(PINA,PinNum);
 26a:	e9 e3       	ldi	r30, 0x39	; 57
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	48 2f       	mov	r20, r24
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	28 2f       	mov	r18, r24
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 2e       	mov	r0, r18
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_ReadPin+0x2e>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	0a 94       	dec	r0
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_ReadPin+0x2a>
 288:	84 23       	and	r24, r20
 28a:	8a 83       	std	Y+2, r24	; 0x02
 28c:	52 c0       	rjmp	.+164    	; 0x332 <DIO_ReadPin+0xdc>
}

else if(PinNum > 7 && PinNum < 16)
 28e:	89 81       	ldd	r24, Y+1	; 0x01
 290:	88 30       	cpi	r24, 0x08	; 8
 292:	c0 f0       	brcs	.+48     	; 0x2c4 <DIO_ReadPin+0x6e>
 294:	89 81       	ldd	r24, Y+1	; 0x01
 296:	80 31       	cpi	r24, 0x10	; 16
 298:	a8 f4       	brcc	.+42     	; 0x2c4 <DIO_ReadPin+0x6e>
{
	return Get_Bit(PINB,(PinNum)-8);
 29a:	e6 e3       	ldi	r30, 0x36	; 54
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	48 2f       	mov	r20, r24
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
 2a4:	88 2f       	mov	r24, r24
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	9c 01       	movw	r18, r24
 2aa:	28 50       	subi	r18, 0x08	; 8
 2ac:	30 40       	sbci	r19, 0x00	; 0
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 2e       	mov	r0, r18
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_ReadPin+0x64>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	0a 94       	dec	r0
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_ReadPin+0x60>
 2be:	84 23       	and	r24, r20
 2c0:	8a 83       	std	Y+2, r24	; 0x02
 2c2:	37 c0       	rjmp	.+110    	; 0x332 <DIO_ReadPin+0xdc>
}

else if(PinNum > 15 && PinNum < 24)
 2c4:	89 81       	ldd	r24, Y+1	; 0x01
 2c6:	80 31       	cpi	r24, 0x10	; 16
 2c8:	c0 f0       	brcs	.+48     	; 0x2fa <DIO_ReadPin+0xa4>
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
 2cc:	88 31       	cpi	r24, 0x18	; 24
 2ce:	a8 f4       	brcc	.+42     	; 0x2fa <DIO_ReadPin+0xa4>
{
	return Get_Bit(PINC,(PinNum)-16);
 2d0:	e3 e3       	ldi	r30, 0x33	; 51
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	48 2f       	mov	r20, r24
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
 2da:	88 2f       	mov	r24, r24
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	9c 01       	movw	r18, r24
 2e0:	20 51       	subi	r18, 0x10	; 16
 2e2:	30 40       	sbci	r19, 0x00	; 0
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 2e       	mov	r0, r18
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_ReadPin+0x9a>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	0a 94       	dec	r0
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_ReadPin+0x96>
 2f4:	84 23       	and	r24, r20
 2f6:	8a 83       	std	Y+2, r24	; 0x02
 2f8:	1c c0       	rjmp	.+56     	; 0x332 <DIO_ReadPin+0xdc>
}

else if(PinNum > 23 && PinNum < 32)
 2fa:	89 81       	ldd	r24, Y+1	; 0x01
 2fc:	88 31       	cpi	r24, 0x18	; 24
 2fe:	c0 f0       	brcs	.+48     	; 0x330 <DIO_ReadPin+0xda>
 300:	89 81       	ldd	r24, Y+1	; 0x01
 302:	80 32       	cpi	r24, 0x20	; 32
 304:	a8 f4       	brcc	.+42     	; 0x330 <DIO_ReadPin+0xda>
{
	return Get_Bit(PIND,(PinNum)-32);
 306:	e0 e3       	ldi	r30, 0x30	; 48
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	48 2f       	mov	r20, r24
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	88 2f       	mov	r24, r24
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	9c 01       	movw	r18, r24
 316:	20 52       	subi	r18, 0x20	; 32
 318:	30 40       	sbci	r19, 0x00	; 0
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 2e       	mov	r0, r18
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_ReadPin+0xd0>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	0a 94       	dec	r0
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_ReadPin+0xcc>
 32a:	84 23       	and	r24, r20
 32c:	8a 83       	std	Y+2, r24	; 0x02
 32e:	01 c0       	rjmp	.+2      	; 0x332 <DIO_ReadPin+0xdc>
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_ReadPin+0xe0>
}


}
 332:	8a 81       	ldd	r24, Y+2	; 0x02
 334:	8b 83       	std	Y+3, r24	; 0x03
 336:	8b 81       	ldd	r24, Y+3	; 0x03
 338:	0f 90       	pop	r0
 33a:	0f 90       	pop	r0
 33c:	0f 90       	pop	r0
 33e:	cf 91       	pop	r28
 340:	df 91       	pop	r29
 342:	08 95       	ret

00000344 <DIO_SetPinDirection>:

void DIO_SetPinDirection(uint8 PinNum, uint8 PinDirection)
{
 344:	df 93       	push	r29
 346:	cf 93       	push	r28
 348:	00 d0       	rcall	.+0      	; 0x34a <DIO_SetPinDirection+0x6>
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
 34e:	89 83       	std	Y+1, r24	; 0x01
 350:	6a 83       	std	Y+2, r22	; 0x02

if(PinNum < 8)
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	88 30       	cpi	r24, 0x08	; 8
 356:	60 f5       	brcc	.+88     	; 0x3b0 <DIO_SetPinDirection+0x6c>
{
	if(PinDirection)
 358:	8a 81       	ldd	r24, Y+2	; 0x02
 35a:	88 23       	and	r24, r24
 35c:	a1 f0       	breq	.+40     	; 0x386 <DIO_SetPinDirection+0x42>
	{
		Set_Bit(DDRA,PinNum);
 35e:	aa e3       	ldi	r26, 0x3A	; 58
 360:	b0 e0       	ldi	r27, 0x00	; 0
 362:	ea e3       	ldi	r30, 0x3A	; 58
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	48 2f       	mov	r20, r24
 36a:	89 81       	ldd	r24, Y+1	; 0x01
 36c:	28 2f       	mov	r18, r24
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 2e       	mov	r0, r18
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_SetPinDirection+0x38>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	0a 94       	dec	r0
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_SetPinDirection+0x34>
 380:	84 2b       	or	r24, r20
 382:	8c 93       	st	X, r24
 384:	bc c0       	rjmp	.+376    	; 0x4fe <DIO_SetPinDirection+0x1ba>
	}
	else
	{
		Clear_Bit(DDRA,PinNum);
 386:	aa e3       	ldi	r26, 0x3A	; 58
 388:	b0 e0       	ldi	r27, 0x00	; 0
 38a:	ea e3       	ldi	r30, 0x3A	; 58
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	48 2f       	mov	r20, r24
 392:	89 81       	ldd	r24, Y+1	; 0x01
 394:	28 2f       	mov	r18, r24
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 2e       	mov	r0, r18
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_SetPinDirection+0x60>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	0a 94       	dec	r0
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_SetPinDirection+0x5c>
 3a8:	80 95       	com	r24
 3aa:	84 23       	and	r24, r20
 3ac:	8c 93       	st	X, r24
 3ae:	a7 c0       	rjmp	.+334    	; 0x4fe <DIO_SetPinDirection+0x1ba>
	}
}

else if(PinNum > 7 && PinNum < 16)
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	88 30       	cpi	r24, 0x08	; 8
 3b4:	a8 f1       	brcs	.+106    	; 0x420 <DIO_SetPinDirection+0xdc>
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	80 31       	cpi	r24, 0x10	; 16
 3ba:	90 f5       	brcc	.+100    	; 0x420 <DIO_SetPinDirection+0xdc>
{
	if(PinDirection)
 3bc:	8a 81       	ldd	r24, Y+2	; 0x02
 3be:	88 23       	and	r24, r24
 3c0:	b9 f0       	breq	.+46     	; 0x3f0 <DIO_SetPinDirection+0xac>
	{
		Set_Bit(DDRB,(PinNum)-8);
 3c2:	a7 e3       	ldi	r26, 0x37	; 55
 3c4:	b0 e0       	ldi	r27, 0x00	; 0
 3c6:	e7 e3       	ldi	r30, 0x37	; 55
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	48 2f       	mov	r20, r24
 3ce:	89 81       	ldd	r24, Y+1	; 0x01
 3d0:	88 2f       	mov	r24, r24
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	9c 01       	movw	r18, r24
 3d6:	28 50       	subi	r18, 0x08	; 8
 3d8:	30 40       	sbci	r19, 0x00	; 0
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 2e       	mov	r0, r18
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_SetPinDirection+0xa2>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	0a 94       	dec	r0
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_SetPinDirection+0x9e>
 3ea:	84 2b       	or	r24, r20
 3ec:	8c 93       	st	X, r24
 3ee:	87 c0       	rjmp	.+270    	; 0x4fe <DIO_SetPinDirection+0x1ba>
	}
	else
	{
		Clear_Bit(DDRB,(PinNum)-8);
 3f0:	a7 e3       	ldi	r26, 0x37	; 55
 3f2:	b0 e0       	ldi	r27, 0x00	; 0
 3f4:	e7 e3       	ldi	r30, 0x37	; 55
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	48 2f       	mov	r20, r24
 3fc:	89 81       	ldd	r24, Y+1	; 0x01
 3fe:	88 2f       	mov	r24, r24
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	9c 01       	movw	r18, r24
 404:	28 50       	subi	r18, 0x08	; 8
 406:	30 40       	sbci	r19, 0x00	; 0
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 2e       	mov	r0, r18
 40e:	02 c0       	rjmp	.+4      	; 0x414 <DIO_SetPinDirection+0xd0>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	0a 94       	dec	r0
 416:	e2 f7       	brpl	.-8      	; 0x410 <DIO_SetPinDirection+0xcc>
 418:	80 95       	com	r24
 41a:	84 23       	and	r24, r20
 41c:	8c 93       	st	X, r24
 41e:	6f c0       	rjmp	.+222    	; 0x4fe <DIO_SetPinDirection+0x1ba>
	}
}

else if(PinNum > 15 && PinNum < 24)
 420:	89 81       	ldd	r24, Y+1	; 0x01
 422:	80 31       	cpi	r24, 0x10	; 16
 424:	a8 f1       	brcs	.+106    	; 0x490 <DIO_SetPinDirection+0x14c>
 426:	89 81       	ldd	r24, Y+1	; 0x01
 428:	88 31       	cpi	r24, 0x18	; 24
 42a:	90 f5       	brcc	.+100    	; 0x490 <DIO_SetPinDirection+0x14c>
{
	if(PinDirection)
 42c:	8a 81       	ldd	r24, Y+2	; 0x02
 42e:	88 23       	and	r24, r24
 430:	b9 f0       	breq	.+46     	; 0x460 <DIO_SetPinDirection+0x11c>
	{
		Set_Bit(DDRC,(PinNum)-16);
 432:	a4 e3       	ldi	r26, 0x34	; 52
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	e4 e3       	ldi	r30, 0x34	; 52
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	48 2f       	mov	r20, r24
 43e:	89 81       	ldd	r24, Y+1	; 0x01
 440:	88 2f       	mov	r24, r24
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	9c 01       	movw	r18, r24
 446:	20 51       	subi	r18, 0x10	; 16
 448:	30 40       	sbci	r19, 0x00	; 0
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 2e       	mov	r0, r18
 450:	02 c0       	rjmp	.+4      	; 0x456 <DIO_SetPinDirection+0x112>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	0a 94       	dec	r0
 458:	e2 f7       	brpl	.-8      	; 0x452 <DIO_SetPinDirection+0x10e>
 45a:	84 2b       	or	r24, r20
 45c:	8c 93       	st	X, r24
 45e:	4f c0       	rjmp	.+158    	; 0x4fe <DIO_SetPinDirection+0x1ba>
	}
	else
	{
		Clear_Bit(DDRC,(PinNum)-16);
 460:	a4 e3       	ldi	r26, 0x34	; 52
 462:	b0 e0       	ldi	r27, 0x00	; 0
 464:	e4 e3       	ldi	r30, 0x34	; 52
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	48 2f       	mov	r20, r24
 46c:	89 81       	ldd	r24, Y+1	; 0x01
 46e:	88 2f       	mov	r24, r24
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	9c 01       	movw	r18, r24
 474:	20 51       	subi	r18, 0x10	; 16
 476:	30 40       	sbci	r19, 0x00	; 0
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	02 2e       	mov	r0, r18
 47e:	02 c0       	rjmp	.+4      	; 0x484 <DIO_SetPinDirection+0x140>
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	0a 94       	dec	r0
 486:	e2 f7       	brpl	.-8      	; 0x480 <DIO_SetPinDirection+0x13c>
 488:	80 95       	com	r24
 48a:	84 23       	and	r24, r20
 48c:	8c 93       	st	X, r24
 48e:	37 c0       	rjmp	.+110    	; 0x4fe <DIO_SetPinDirection+0x1ba>
	}
}

else if(PinNum > 23 && PinNum < 32)
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	88 31       	cpi	r24, 0x18	; 24
 494:	a0 f1       	brcs	.+104    	; 0x4fe <DIO_SetPinDirection+0x1ba>
 496:	89 81       	ldd	r24, Y+1	; 0x01
 498:	80 32       	cpi	r24, 0x20	; 32
 49a:	88 f5       	brcc	.+98     	; 0x4fe <DIO_SetPinDirection+0x1ba>
{
	if(PinDirection)
 49c:	8a 81       	ldd	r24, Y+2	; 0x02
 49e:	88 23       	and	r24, r24
 4a0:	b9 f0       	breq	.+46     	; 0x4d0 <DIO_SetPinDirection+0x18c>
	{
		Set_Bit(DDRC,(PinNum)-16);
 4a2:	a4 e3       	ldi	r26, 0x34	; 52
 4a4:	b0 e0       	ldi	r27, 0x00	; 0
 4a6:	e4 e3       	ldi	r30, 0x34	; 52
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	48 2f       	mov	r20, r24
 4ae:	89 81       	ldd	r24, Y+1	; 0x01
 4b0:	88 2f       	mov	r24, r24
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	9c 01       	movw	r18, r24
 4b6:	20 51       	subi	r18, 0x10	; 16
 4b8:	30 40       	sbci	r19, 0x00	; 0
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	02 2e       	mov	r0, r18
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_SetPinDirection+0x182>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	0a 94       	dec	r0
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_SetPinDirection+0x17e>
 4ca:	84 2b       	or	r24, r20
 4cc:	8c 93       	st	X, r24
 4ce:	17 c0       	rjmp	.+46     	; 0x4fe <DIO_SetPinDirection+0x1ba>
	}
	else
	{
		Clear_Bit(DDRC,(PinNum)-16);
 4d0:	a4 e3       	ldi	r26, 0x34	; 52
 4d2:	b0 e0       	ldi	r27, 0x00	; 0
 4d4:	e4 e3       	ldi	r30, 0x34	; 52
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 81       	ld	r24, Z
 4da:	48 2f       	mov	r20, r24
 4dc:	89 81       	ldd	r24, Y+1	; 0x01
 4de:	88 2f       	mov	r24, r24
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	9c 01       	movw	r18, r24
 4e4:	20 51       	subi	r18, 0x10	; 16
 4e6:	30 40       	sbci	r19, 0x00	; 0
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 2e       	mov	r0, r18
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_SetPinDirection+0x1b0>
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	0a 94       	dec	r0
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <DIO_SetPinDirection+0x1ac>
 4f8:	80 95       	com	r24
 4fa:	84 23       	and	r24, r20
 4fc:	8c 93       	st	X, r24
	}
}


}
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	cf 91       	pop	r28
 504:	df 91       	pop	r29
 506:	08 95       	ret

00000508 <__vector_11>:
volatile uint32 G_Tick=0;

extern Task Tasks[MaxTaskNo];

ISR(TIMER0_OVF_vect)
{
 508:	1f 92       	push	r1
 50a:	0f 92       	push	r0
 50c:	0f b6       	in	r0, 0x3f	; 63
 50e:	0f 92       	push	r0
 510:	11 24       	eor	r1, r1
 512:	8f 93       	push	r24
 514:	9f 93       	push	r25
 516:	ef 93       	push	r30
 518:	ff 93       	push	r31
 51a:	df 93       	push	r29
 51c:	cf 93       	push	r28
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
	G_Tick++;
 522:	80 91 82 00 	lds	r24, 0x0082
 526:	90 91 83 00 	lds	r25, 0x0083
 52a:	01 96       	adiw	r24, 0x01	; 1
 52c:	90 93 83 00 	sts	0x0083, r25
 530:	80 93 82 00 	sts	0x0082, r24
	TCNT0=Res_One;
 534:	e2 e5       	ldi	r30, 0x52	; 82
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	83 e8       	ldi	r24, 0x83	; 131
 53a:	80 83       	st	Z, r24
}
 53c:	cf 91       	pop	r28
 53e:	df 91       	pop	r29
 540:	ff 91       	pop	r31
 542:	ef 91       	pop	r30
 544:	9f 91       	pop	r25
 546:	8f 91       	pop	r24
 548:	0f 90       	pop	r0
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	0f 90       	pop	r0
 54e:	1f 90       	pop	r1
 550:	18 95       	reti

00000552 <TMU_Init>:




uint8 TMU_Init(uint8 persicion, uint8 Timer_ID)
{
 552:	df 93       	push	r29
 554:	cf 93       	push	r28
 556:	00 d0       	rcall	.+0      	; 0x558 <TMU_Init+0x6>
 558:	0f 92       	push	r0
 55a:	cd b7       	in	r28, 0x3d	; 61
 55c:	de b7       	in	r29, 0x3e	; 62
 55e:	89 83       	std	Y+1, r24	; 0x01
 560:	6a 83       	std	Y+2, r22	; 0x02
	if(Timer_ID==0)
 562:	8a 81       	ldd	r24, Y+2	; 0x02
 564:	88 23       	and	r24, r24
 566:	21 f4       	brne	.+8      	; 0x570 <TMU_Init+0x1e>
		{
			Timer_TMU(persicion);
 568:	89 81       	ldd	r24, Y+1	; 0x01
 56a:	0e 94 39 04 	call	0x872	; 0x872 <Timer_TMU>
 56e:	08 c0       	rjmp	.+16     	; 0x580 <TMU_Init+0x2e>
		}
		
	else if(Timer_ID==1){}	
 570:	8a 81       	ldd	r24, Y+2	; 0x02
 572:	81 30       	cpi	r24, 0x01	; 1
 574:	29 f0       	breq	.+10     	; 0x580 <TMU_Init+0x2e>

	else if(Timer_ID==2){}
 576:	8a 81       	ldd	r24, Y+2	; 0x02
 578:	82 30       	cpi	r24, 0x02	; 2
 57a:	11 f0       	breq	.+4      	; 0x580 <TMU_Init+0x2e>
		
	else
		{
			return NOT_OK;
 57c:	1b 82       	std	Y+3, r1	; 0x03
 57e:	02 c0       	rjmp	.+4      	; 0x584 <TMU_Init+0x32>
		}
		return OK;
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	8b 83       	std	Y+3, r24	; 0x03
 584:	8b 81       	ldd	r24, Y+3	; 0x03
}
 586:	0f 90       	pop	r0
 588:	0f 90       	pop	r0
 58a:	0f 90       	pop	r0
 58c:	cf 91       	pop	r28
 58e:	df 91       	pop	r29
 590:	08 95       	ret

00000592 <TMU_Dispatcher>:


void TMU_Dispatcher(uint8 div)
{
 592:	0f 93       	push	r16
 594:	1f 93       	push	r17
 596:	df 93       	push	r29
 598:	cf 93       	push	r28
 59a:	00 d0       	rcall	.+0      	; 0x59c <TMU_Dispatcher+0xa>
 59c:	0f 92       	push	r0
 59e:	cd b7       	in	r28, 0x3d	; 61
 5a0:	de b7       	in	r29, 0x3e	; 62
 5a2:	8b 83       	std	Y+3, r24	; 0x03
		int i;
		for(i=0;i<MaxTaskNo;i++)
 5a4:	1a 82       	std	Y+2, r1	; 0x02
 5a6:	19 82       	std	Y+1, r1	; 0x01
 5a8:	a8 c0       	rjmp	.+336    	; 0x6fa <TMU_Dispatcher+0x168>
		{
			TMU_Start();
 5aa:	0e 94 8b 03 	call	0x716	; 0x716 <TMU_Start>
			if(Tasks[i].Start_Flag==1)
 5ae:	49 81       	ldd	r20, Y+1	; 0x01
 5b0:	5a 81       	ldd	r21, Y+2	; 0x02
 5b2:	ca 01       	movw	r24, r20
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	9c 01       	movw	r18, r24
 5ba:	22 0f       	add	r18, r18
 5bc:	33 1f       	adc	r19, r19
 5be:	22 0f       	add	r18, r18
 5c0:	33 1f       	adc	r19, r19
 5c2:	82 0f       	add	r24, r18
 5c4:	93 1f       	adc	r25, r19
 5c6:	84 0f       	add	r24, r20
 5c8:	95 1f       	adc	r25, r21
 5ca:	fc 01       	movw	r30, r24
 5cc:	eb 59       	subi	r30, 0x9B	; 155
 5ce:	ff 4f       	sbci	r31, 0xFF	; 255
 5d0:	80 81       	ld	r24, Z
 5d2:	81 30       	cpi	r24, 0x01	; 1
 5d4:	09 f0       	breq	.+2      	; 0x5d8 <TMU_Dispatcher+0x46>
 5d6:	8c c0       	rjmp	.+280    	; 0x6f0 <TMU_Dispatcher+0x15e>
			{
				if(Tasks[i].Steps==G_Tick)
 5d8:	49 81       	ldd	r20, Y+1	; 0x01
 5da:	5a 81       	ldd	r21, Y+2	; 0x02
 5dc:	ca 01       	movw	r24, r20
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	9c 01       	movw	r18, r24
 5e4:	22 0f       	add	r18, r18
 5e6:	33 1f       	adc	r19, r19
 5e8:	22 0f       	add	r18, r18
 5ea:	33 1f       	adc	r19, r19
 5ec:	82 0f       	add	r24, r18
 5ee:	93 1f       	adc	r25, r19
 5f0:	84 0f       	add	r24, r20
 5f2:	95 1f       	adc	r25, r21
 5f4:	fc 01       	movw	r30, r24
 5f6:	e9 59       	subi	r30, 0x99	; 153
 5f8:	ff 4f       	sbci	r31, 0xFF	; 255
 5fa:	20 81       	ld	r18, Z
 5fc:	31 81       	ldd	r19, Z+1	; 0x01
 5fe:	80 91 82 00 	lds	r24, 0x0082
 602:	90 91 83 00 	lds	r25, 0x0083
 606:	28 17       	cp	r18, r24
 608:	39 07       	cpc	r19, r25
 60a:	09 f0       	breq	.+2      	; 0x60e <TMU_Dispatcher+0x7c>
 60c:	71 c0       	rjmp	.+226    	; 0x6f0 <TMU_Dispatcher+0x15e>
				{
					Tasks[i].Steps = (Tasks[i].Delay + G_Tick)/ div;
 60e:	09 81       	ldd	r16, Y+1	; 0x01
 610:	1a 81       	ldd	r17, Y+2	; 0x02
 612:	49 81       	ldd	r20, Y+1	; 0x01
 614:	5a 81       	ldd	r21, Y+2	; 0x02
 616:	ca 01       	movw	r24, r20
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	9c 01       	movw	r18, r24
 61e:	22 0f       	add	r18, r18
 620:	33 1f       	adc	r19, r19
 622:	22 0f       	add	r18, r18
 624:	33 1f       	adc	r19, r19
 626:	82 0f       	add	r24, r18
 628:	93 1f       	adc	r25, r19
 62a:	84 0f       	add	r24, r20
 62c:	95 1f       	adc	r25, r21
 62e:	fc 01       	movw	r30, r24
 630:	ef 59       	subi	r30, 0x9F	; 159
 632:	ff 4f       	sbci	r31, 0xFF	; 255
 634:	20 81       	ld	r18, Z
 636:	31 81       	ldd	r19, Z+1	; 0x01
 638:	80 91 82 00 	lds	r24, 0x0082
 63c:	90 91 83 00 	lds	r25, 0x0083
 640:	a9 01       	movw	r20, r18
 642:	48 0f       	add	r20, r24
 644:	59 1f       	adc	r21, r25
 646:	8b 81       	ldd	r24, Y+3	; 0x03
 648:	28 2f       	mov	r18, r24
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	ca 01       	movw	r24, r20
 64e:	b9 01       	movw	r22, r18
 650:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__udivmodhi4>
 654:	cb 01       	movw	r24, r22
 656:	ac 01       	movw	r20, r24
 658:	c8 01       	movw	r24, r16
 65a:	88 0f       	add	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	9c 01       	movw	r18, r24
 660:	22 0f       	add	r18, r18
 662:	33 1f       	adc	r19, r19
 664:	22 0f       	add	r18, r18
 666:	33 1f       	adc	r19, r19
 668:	82 0f       	add	r24, r18
 66a:	93 1f       	adc	r25, r19
 66c:	80 0f       	add	r24, r16
 66e:	91 1f       	adc	r25, r17
 670:	fc 01       	movw	r30, r24
 672:	e9 59       	subi	r30, 0x99	; 153
 674:	ff 4f       	sbci	r31, 0xFF	; 255
 676:	51 83       	std	Z+1, r21	; 0x01
 678:	40 83       	st	Z, r20
					Tasks[i].Call_Back();
 67a:	49 81       	ldd	r20, Y+1	; 0x01
 67c:	5a 81       	ldd	r21, Y+2	; 0x02
 67e:	ca 01       	movw	r24, r20
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	9c 01       	movw	r18, r24
 686:	22 0f       	add	r18, r18
 688:	33 1f       	adc	r19, r19
 68a:	22 0f       	add	r18, r18
 68c:	33 1f       	adc	r19, r19
 68e:	82 0f       	add	r24, r18
 690:	93 1f       	adc	r25, r19
 692:	84 0f       	add	r24, r20
 694:	95 1f       	adc	r25, r21
 696:	fc 01       	movw	r30, r24
 698:	ed 59       	subi	r30, 0x9D	; 157
 69a:	ff 4f       	sbci	r31, 0xFF	; 255
 69c:	01 90       	ld	r0, Z+
 69e:	f0 81       	ld	r31, Z
 6a0:	e0 2d       	mov	r30, r0
 6a2:	09 95       	icall
					if(Tasks[i].Status==ONE_SHOT)
 6a4:	49 81       	ldd	r20, Y+1	; 0x01
 6a6:	5a 81       	ldd	r21, Y+2	; 0x02
 6a8:	ca 01       	movw	r24, r20
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	9c 01       	movw	r18, r24
 6b0:	22 0f       	add	r18, r18
 6b2:	33 1f       	adc	r19, r19
 6b4:	22 0f       	add	r18, r18
 6b6:	33 1f       	adc	r19, r19
 6b8:	82 0f       	add	r24, r18
 6ba:	93 1f       	adc	r25, r19
 6bc:	84 0f       	add	r24, r20
 6be:	95 1f       	adc	r25, r21
 6c0:	fc 01       	movw	r30, r24
 6c2:	ea 59       	subi	r30, 0x9A	; 154
 6c4:	ff 4f       	sbci	r31, 0xFF	; 255
 6c6:	80 81       	ld	r24, Z
 6c8:	81 30       	cpi	r24, 0x01	; 1
 6ca:	91 f4       	brne	.+36     	; 0x6f0 <TMU_Dispatcher+0x15e>
						{
							Tasks[i].Start_Flag=0;
 6cc:	49 81       	ldd	r20, Y+1	; 0x01
 6ce:	5a 81       	ldd	r21, Y+2	; 0x02
 6d0:	ca 01       	movw	r24, r20
 6d2:	88 0f       	add	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	9c 01       	movw	r18, r24
 6d8:	22 0f       	add	r18, r18
 6da:	33 1f       	adc	r19, r19
 6dc:	22 0f       	add	r18, r18
 6de:	33 1f       	adc	r19, r19
 6e0:	82 0f       	add	r24, r18
 6e2:	93 1f       	adc	r25, r19
 6e4:	84 0f       	add	r24, r20
 6e6:	95 1f       	adc	r25, r21
 6e8:	fc 01       	movw	r30, r24
 6ea:	eb 59       	subi	r30, 0x9B	; 155
 6ec:	ff 4f       	sbci	r31, 0xFF	; 255
 6ee:	10 82       	st	Z, r1


void TMU_Dispatcher(uint8 div)
{
		int i;
		for(i=0;i<MaxTaskNo;i++)
 6f0:	89 81       	ldd	r24, Y+1	; 0x01
 6f2:	9a 81       	ldd	r25, Y+2	; 0x02
 6f4:	01 96       	adiw	r24, 0x01	; 1
 6f6:	9a 83       	std	Y+2, r25	; 0x02
 6f8:	89 83       	std	Y+1, r24	; 0x01
 6fa:	89 81       	ldd	r24, Y+1	; 0x01
 6fc:	9a 81       	ldd	r25, Y+2	; 0x02
 6fe:	83 30       	cpi	r24, 0x03	; 3
 700:	91 05       	cpc	r25, r1
 702:	0c f4       	brge	.+2      	; 0x706 <TMU_Dispatcher+0x174>
 704:	52 cf       	rjmp	.-348    	; 0x5aa <TMU_Dispatcher+0x18>
						}
				}
			}
			
		}
}
 706:	0f 90       	pop	r0
 708:	0f 90       	pop	r0
 70a:	0f 90       	pop	r0
 70c:	cf 91       	pop	r28
 70e:	df 91       	pop	r29
 710:	1f 91       	pop	r17
 712:	0f 91       	pop	r16
 714:	08 95       	ret

00000716 <TMU_Start>:

void TMU_Start(void)
{
 716:	df 93       	push	r29
 718:	cf 93       	push	r28
 71a:	cd b7       	in	r28, 0x3d	; 61
 71c:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,I);
 71e:	af e5       	ldi	r26, 0x5F	; 95
 720:	b0 e0       	ldi	r27, 0x00	; 0
 722:	ef e5       	ldi	r30, 0x5F	; 95
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	80 81       	ld	r24, Z
 728:	80 68       	ori	r24, 0x80	; 128
 72a:	8c 93       	st	X, r24
	Timer_TMU_Start();
 72c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <Timer_TMU_Start>
}
 730:	cf 91       	pop	r28
 732:	df 91       	pop	r29
 734:	08 95       	ret

00000736 <TMU_Stop>:

void TMU_Stop(uint8 ID)
{
 736:	df 93       	push	r29
 738:	cf 93       	push	r28
 73a:	00 d0       	rcall	.+0      	; 0x73c <TMU_Stop+0x6>
 73c:	0f 92       	push	r0
 73e:	cd b7       	in	r28, 0x3d	; 61
 740:	de b7       	in	r29, 0x3e	; 62
 742:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;i<MaxTaskNo;i++)
 744:	1a 82       	std	Y+2, r1	; 0x02
 746:	19 82       	std	Y+1, r1	; 0x01
 748:	2c c0       	rjmp	.+88     	; 0x7a2 <TMU_Stop+0x6c>
	{
		if(Tasks[i].Task_ID == ID)
 74a:	49 81       	ldd	r20, Y+1	; 0x01
 74c:	5a 81       	ldd	r21, Y+2	; 0x02
 74e:	ca 01       	movw	r24, r20
 750:	88 0f       	add	r24, r24
 752:	99 1f       	adc	r25, r25
 754:	9c 01       	movw	r18, r24
 756:	22 0f       	add	r18, r18
 758:	33 1f       	adc	r19, r19
 75a:	22 0f       	add	r18, r18
 75c:	33 1f       	adc	r19, r19
 75e:	82 0f       	add	r24, r18
 760:	93 1f       	adc	r25, r19
 762:	84 0f       	add	r24, r20
 764:	95 1f       	adc	r25, r21
 766:	fc 01       	movw	r30, r24
 768:	e0 5a       	subi	r30, 0xA0	; 160
 76a:	ff 4f       	sbci	r31, 0xFF	; 255
 76c:	90 81       	ld	r25, Z
 76e:	8b 81       	ldd	r24, Y+3	; 0x03
 770:	98 17       	cp	r25, r24
 772:	91 f4       	brne	.+36     	; 0x798 <TMU_Stop+0x62>
		{
			Tasks[i].Start_Flag=0;
 774:	49 81       	ldd	r20, Y+1	; 0x01
 776:	5a 81       	ldd	r21, Y+2	; 0x02
 778:	ca 01       	movw	r24, r20
 77a:	88 0f       	add	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	9c 01       	movw	r18, r24
 780:	22 0f       	add	r18, r18
 782:	33 1f       	adc	r19, r19
 784:	22 0f       	add	r18, r18
 786:	33 1f       	adc	r19, r19
 788:	82 0f       	add	r24, r18
 78a:	93 1f       	adc	r25, r19
 78c:	84 0f       	add	r24, r20
 78e:	95 1f       	adc	r25, r21
 790:	fc 01       	movw	r30, r24
 792:	eb 59       	subi	r30, 0x9B	; 155
 794:	ff 4f       	sbci	r31, 0xFF	; 255
 796:	10 82       	st	Z, r1
}

void TMU_Stop(uint8 ID)
{
	int i;
	for(i=0;i<MaxTaskNo;i++)
 798:	89 81       	ldd	r24, Y+1	; 0x01
 79a:	9a 81       	ldd	r25, Y+2	; 0x02
 79c:	01 96       	adiw	r24, 0x01	; 1
 79e:	9a 83       	std	Y+2, r25	; 0x02
 7a0:	89 83       	std	Y+1, r24	; 0x01
 7a2:	89 81       	ldd	r24, Y+1	; 0x01
 7a4:	9a 81       	ldd	r25, Y+2	; 0x02
 7a6:	83 30       	cpi	r24, 0x03	; 3
 7a8:	91 05       	cpc	r25, r1
 7aa:	7c f2       	brlt	.-98     	; 0x74a <TMU_Stop+0x14>
		if(Tasks[i].Task_ID == ID)
		{
			Tasks[i].Start_Flag=0;
		}
	}
}
 7ac:	0f 90       	pop	r0
 7ae:	0f 90       	pop	r0
 7b0:	0f 90       	pop	r0
 7b2:	cf 91       	pop	r28
 7b4:	df 91       	pop	r29
 7b6:	08 95       	ret

000007b8 <Timer_Init>:
#include "Timer.h"

uint8 *ptr = (uint8 *) 0;

void Timer_Init(uint8 pre, uint8 delay)
{
 7b8:	df 93       	push	r29
 7ba:	cf 93       	push	r28
 7bc:	00 d0       	rcall	.+0      	; 0x7be <Timer_Init+0x6>
 7be:	cd b7       	in	r28, 0x3d	; 61
 7c0:	de b7       	in	r29, 0x3e	; 62
 7c2:	89 83       	std	Y+1, r24	; 0x01
 7c4:	6a 83       	std	Y+2, r22	; 0x02
	ptr=&delay;
 7c6:	ce 01       	movw	r24, r28
 7c8:	02 96       	adiw	r24, 0x02	; 2
 7ca:	90 93 85 00 	sts	0x0085, r25
 7ce:	80 93 84 00 	sts	0x0084, r24
	Clear_Bit(TCCR0,WGM01);
	Clear_Bit(TCCR0,WGM00);
	TCCR0  = (pre&0x7) | (TCCR0&0xF8);

	#elif defined Phase_PWM
	DIO_SetPinDirection(PIN11,OUT);
 7d2:	8b e0       	ldi	r24, 0x0B	; 11
 7d4:	61 e0       	ldi	r22, 0x01	; 1
 7d6:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_SetPinDirection>
	Clear_Bit(TCCR0,TCCR0);
 7da:	a3 e5       	ldi	r26, 0x53	; 83
 7dc:	b0 e0       	ldi	r27, 0x00	; 0
 7de:	e3 e5       	ldi	r30, 0x53	; 83
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	80 81       	ld	r24, Z
 7e4:	48 2f       	mov	r20, r24
 7e6:	e3 e5       	ldi	r30, 0x53	; 83
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	80 81       	ld	r24, Z
 7ec:	28 2f       	mov	r18, r24
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	02 2e       	mov	r0, r18
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <Timer_Init+0x44>
 7f8:	88 0f       	add	r24, r24
 7fa:	99 1f       	adc	r25, r25
 7fc:	0a 94       	dec	r0
 7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <Timer_Init+0x40>
 800:	80 95       	com	r24
 802:	84 23       	and	r24, r20
 804:	8c 93       	st	X, r24
	Clear_Bit(TCCR0,WGM01);
 806:	a3 e5       	ldi	r26, 0x53	; 83
 808:	b0 e0       	ldi	r27, 0x00	; 0
 80a:	e3 e5       	ldi	r30, 0x53	; 83
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	80 81       	ld	r24, Z
 810:	87 7f       	andi	r24, 0xF7	; 247
 812:	8c 93       	st	X, r24
	Set_Bit(TCCR0,WGM00);
 814:	a3 e5       	ldi	r26, 0x53	; 83
 816:	b0 e0       	ldi	r27, 0x00	; 0
 818:	e3 e5       	ldi	r30, 0x53	; 83
 81a:	f0 e0       	ldi	r31, 0x00	; 0
 81c:	80 81       	ld	r24, Z
 81e:	80 64       	ori	r24, 0x40	; 64
 820:	8c 93       	st	X, r24
	Set_Bit(TCCR0,COM01);
 822:	a3 e5       	ldi	r26, 0x53	; 83
 824:	b0 e0       	ldi	r27, 0x00	; 0
 826:	e3 e5       	ldi	r30, 0x53	; 83
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	80 81       	ld	r24, Z
 82c:	80 62       	ori	r24, 0x20	; 32
 82e:	8c 93       	st	X, r24
	Set_Bit(TCCR0,COM00);
 830:	a3 e5       	ldi	r26, 0x53	; 83
 832:	b0 e0       	ldi	r27, 0x00	; 0
 834:	e3 e5       	ldi	r30, 0x53	; 83
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	80 81       	ld	r24, Z
 83a:	80 61       	ori	r24, 0x10	; 16
 83c:	8c 93       	st	X, r24
	TCCR0  = (pre&0x7) | (TCCR0&0xF8);
 83e:	a3 e5       	ldi	r26, 0x53	; 83
 840:	b0 e0       	ldi	r27, 0x00	; 0
 842:	89 81       	ldd	r24, Y+1	; 0x01
 844:	98 2f       	mov	r25, r24
 846:	97 70       	andi	r25, 0x07	; 7
 848:	e3 e5       	ldi	r30, 0x53	; 83
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	80 81       	ld	r24, Z
 84e:	88 7f       	andi	r24, 0xF8	; 248
 850:	89 2b       	or	r24, r25
 852:	8c 93       	st	X, r24
	OCR0 = 255-(2.55*Duty);
 854:	ec e5       	ldi	r30, 0x5C	; 92
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	10 82       	st	Z, r1
	


	#elif defined PWM
	#endif
}
 85a:	0f 90       	pop	r0
 85c:	0f 90       	pop	r0
 85e:	cf 91       	pop	r28
 860:	df 91       	pop	r29
 862:	08 95       	ret

00000864 <Timer_Delay>:


void Timer_Delay(void)
{
 864:	df 93       	push	r29
 866:	cf 93       	push	r28
 868:	cd b7       	in	r28, 0x3d	; 61
 86a:	de b7       	in	r29, 0x3e	; 62
	TIFR |= (1<<OCF0);

	#elif defined PWM
	#endif
	
}
 86c:	cf 91       	pop	r28
 86e:	df 91       	pop	r29
 870:	08 95       	ret

00000872 <Timer_TMU>:

void Timer_TMU(uint8 Resolution)
{
 872:	df 93       	push	r29
 874:	cf 93       	push	r28
 876:	00 d0       	rcall	.+0      	; 0x878 <Timer_TMU+0x6>
 878:	0f 92       	push	r0
 87a:	cd b7       	in	r28, 0x3d	; 61
 87c:	de b7       	in	r29, 0x3e	; 62
 87e:	89 83       	std	Y+1, r24	; 0x01
	switch(Resolution)
 880:	89 81       	ldd	r24, Y+1	; 0x01
 882:	28 2f       	mov	r18, r24
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	3b 83       	std	Y+3, r19	; 0x03
 888:	2a 83       	std	Y+2, r18	; 0x02
 88a:	8a 81       	ldd	r24, Y+2	; 0x02
 88c:	9b 81       	ldd	r25, Y+3	; 0x03
 88e:	83 38       	cpi	r24, 0x83	; 131
 890:	91 05       	cpc	r25, r1
 892:	81 f0       	breq	.+32     	; 0x8b4 <Timer_TMU+0x42>
 894:	2a 81       	ldd	r18, Y+2	; 0x02
 896:	3b 81       	ldd	r19, Y+3	; 0x03
 898:	21 3c       	cpi	r18, 0xC1	; 193
 89a:	31 05       	cpc	r19, r1
 89c:	31 f0       	breq	.+12     	; 0x8aa <Timer_TMU+0x38>
 89e:	8a 81       	ldd	r24, Y+2	; 0x02
 8a0:	9b 81       	ldd	r25, Y+3	; 0x03
 8a2:	86 30       	cpi	r24, 0x06	; 6
 8a4:	91 05       	cpc	r25, r1
 8a6:	59 f0       	breq	.+22     	; 0x8be <Timer_TMU+0x4c>
 8a8:	0e c0       	rjmp	.+28     	; 0x8c6 <Timer_TMU+0x54>
	{
		case Res_Half:
			TCNT0 = Res_Half;
 8aa:	e2 e5       	ldi	r30, 0x52	; 82
 8ac:	f0 e0       	ldi	r31, 0x00	; 0
 8ae:	81 ec       	ldi	r24, 0xC1	; 193
 8b0:	80 83       	st	Z, r24
 8b2:	09 c0       	rjmp	.+18     	; 0x8c6 <Timer_TMU+0x54>
			break;
			
		case Res_One:
			TCNT0 = Res_One;
 8b4:	e2 e5       	ldi	r30, 0x52	; 82
 8b6:	f0 e0       	ldi	r31, 0x00	; 0
 8b8:	83 e8       	ldi	r24, 0x83	; 131
 8ba:	80 83       	st	Z, r24
 8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <Timer_TMU+0x54>
			break;
			
		case Res_Two:
			TCNT0 = Res_Two;
 8be:	e2 e5       	ldi	r30, 0x52	; 82
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	86 e0       	ldi	r24, 0x06	; 6
 8c4:	80 83       	st	Z, r24
			break;
		
		default:
			break;
	}
	Set_Bit(TIMSK,TOIE0);
 8c6:	a9 e5       	ldi	r26, 0x59	; 89
 8c8:	b0 e0       	ldi	r27, 0x00	; 0
 8ca:	e9 e5       	ldi	r30, 0x59	; 89
 8cc:	f0 e0       	ldi	r31, 0x00	; 0
 8ce:	80 81       	ld	r24, Z
 8d0:	81 60       	ori	r24, 0x01	; 1
 8d2:	8c 93       	st	X, r24
}
 8d4:	0f 90       	pop	r0
 8d6:	0f 90       	pop	r0
 8d8:	0f 90       	pop	r0
 8da:	cf 91       	pop	r28
 8dc:	df 91       	pop	r29
 8de:	08 95       	ret

000008e0 <Timer_TMU_Start>:

void Timer_TMU_Start(void)
{
 8e0:	df 93       	push	r29
 8e2:	cf 93       	push	r28
 8e4:	cd b7       	in	r28, 0x3d	; 61
 8e6:	de b7       	in	r29, 0x3e	; 62
	TCCR0  = (CLK_64&0x7) | (TCCR0&0xF8);
 8e8:	a3 e5       	ldi	r26, 0x53	; 83
 8ea:	b0 e0       	ldi	r27, 0x00	; 0
 8ec:	e3 e5       	ldi	r30, 0x53	; 83
 8ee:	f0 e0       	ldi	r31, 0x00	; 0
 8f0:	80 81       	ld	r24, Z
 8f2:	88 7f       	andi	r24, 0xF8	; 248
 8f4:	83 60       	ori	r24, 0x03	; 3
 8f6:	8c 93       	st	X, r24
}
 8f8:	cf 91       	pop	r28
 8fa:	df 91       	pop	r29
 8fc:	08 95       	ret

000008fe <TEST>:
#include "TMU.h"
#include <util/delay.h>


void TEST(void)
{
 8fe:	df 93       	push	r29
 900:	cf 93       	push	r28
 902:	cd b7       	in	r28, 0x3d	; 61
 904:	de b7       	in	r29, 0x3e	; 62
	PORTB ^= (1<<4);
 906:	a8 e3       	ldi	r26, 0x38	; 56
 908:	b0 e0       	ldi	r27, 0x00	; 0
 90a:	e8 e3       	ldi	r30, 0x38	; 56
 90c:	f0 e0       	ldi	r31, 0x00	; 0
 90e:	90 81       	ld	r25, Z
 910:	80 e1       	ldi	r24, 0x10	; 16
 912:	89 27       	eor	r24, r25
 914:	8c 93       	st	X, r24
}
 916:	cf 91       	pop	r28
 918:	df 91       	pop	r29
 91a:	08 95       	ret

0000091c <Toggle>:

void Toggle(void)
{
 91c:	df 93       	push	r29
 91e:	cf 93       	push	r28
 920:	cd b7       	in	r28, 0x3d	; 61
 922:	de b7       	in	r29, 0x3e	; 62
	PORTB ^= (1<<5);
 924:	a8 e3       	ldi	r26, 0x38	; 56
 926:	b0 e0       	ldi	r27, 0x00	; 0
 928:	e8 e3       	ldi	r30, 0x38	; 56
 92a:	f0 e0       	ldi	r31, 0x00	; 0
 92c:	90 81       	ld	r25, Z
 92e:	80 e2       	ldi	r24, 0x20	; 32
 930:	89 27       	eor	r24, r25
 932:	8c 93       	st	X, r24

}
 934:	cf 91       	pop	r28
 936:	df 91       	pop	r29
 938:	08 95       	ret

0000093a <abdlkader>:
void abdlkader(void)
{
 93a:	df 93       	push	r29
 93c:	cf 93       	push	r28
 93e:	cd b7       	in	r28, 0x3d	; 61
 940:	de b7       	in	r29, 0x3e	; 62
	PORTB ^= (1<<6);
 942:	a8 e3       	ldi	r26, 0x38	; 56
 944:	b0 e0       	ldi	r27, 0x00	; 0
 946:	e8 e3       	ldi	r30, 0x38	; 56
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	90 81       	ld	r25, Z
 94c:	80 e4       	ldi	r24, 0x40	; 64
 94e:	89 27       	eor	r24, r25
 950:	8c 93       	st	X, r24

}
 952:	cf 91       	pop	r28
 954:	df 91       	pop	r29
 956:	08 95       	ret

00000958 <main>:
	{0,500,TEST,1,PERIODIC,0,0},{1,1000,Toggle,1,PERIODIC,0,0},{1,2000,abdlkader,1,PERIODIC,0,0}
};


int main(void)
{
 958:	df 93       	push	r29
 95a:	cf 93       	push	r28
 95c:	cd b7       	in	r28, 0x3d	; 61
 95e:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(PIN12,OUT);
 960:	8c e0       	ldi	r24, 0x0C	; 12
 962:	61 e0       	ldi	r22, 0x01	; 1
 964:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN14,OUT);
 968:	8e e0       	ldi	r24, 0x0E	; 14
 96a:	61 e0       	ldi	r22, 0x01	; 1
 96c:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN13,OUT);
 970:	8d e0       	ldi	r24, 0x0D	; 13
 972:	61 e0       	ldi	r22, 0x01	; 1
 974:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN10,IN);
 978:	8a e0       	ldi	r24, 0x0A	; 10
 97a:	60 e0       	ldi	r22, 0x00	; 0
 97c:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN20,IN);
 980:	84 e1       	ldi	r24, 0x14	; 20
 982:	60 e0       	ldi	r22, 0x00	; 0
 984:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_SetPinDirection>
	Set_Bit(SREG,I);
 988:	af e5       	ldi	r26, 0x5F	; 95
 98a:	b0 e0       	ldi	r27, 0x00	; 0
 98c:	ef e5       	ldi	r30, 0x5F	; 95
 98e:	f0 e0       	ldi	r31, 0x00	; 0
 990:	80 81       	ld	r24, Z
 992:	80 68       	ori	r24, 0x80	; 128
 994:	8c 93       	st	X, r24
	TMU_Init(Res_One,Timer0);
 996:	83 e8       	ldi	r24, 0x83	; 131
 998:	60 e0       	ldi	r22, 0x00	; 0
 99a:	0e 94 a9 02 	call	0x552	; 0x552 <TMU_Init>
	TMU_Start();
 99e:	0e 94 8b 03 	call	0x716	; 0x716 <TMU_Start>
    while (1) 
    {

    	TMU_Dispatcher(1);
 9a2:	81 e0       	ldi	r24, 0x01	; 1
 9a4:	0e 94 c9 02 	call	0x592	; 0x592 <TMU_Dispatcher>
		if(DIO_ReadPin(PIN10))
 9a8:	8a e0       	ldi	r24, 0x0A	; 10
 9aa:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_ReadPin>
 9ae:	88 23       	and	r24, r24
 9b0:	19 f0       	breq	.+6      	; 0x9b8 <main+0x60>
		{
			Tasks[0].Start_Flag=1;
 9b2:	81 e0       	ldi	r24, 0x01	; 1
 9b4:	80 93 65 00 	sts	0x0065, r24

		}
		

		if(DIO_ReadPin(PIN20))
 9b8:	84 e1       	ldi	r24, 0x14	; 20
 9ba:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_ReadPin>
 9be:	88 23       	and	r24, r24
 9c0:	81 f3       	breq	.-32     	; 0x9a2 <main+0x4a>
		{
			Tasks[1].Start_Flag=1;
 9c2:	81 e0       	ldi	r24, 0x01	; 1
 9c4:	80 93 70 00 	sts	0x0070, r24
 9c8:	ec cf       	rjmp	.-40     	; 0x9a2 <main+0x4a>

000009ca <__udivmodhi4>:
 9ca:	aa 1b       	sub	r26, r26
 9cc:	bb 1b       	sub	r27, r27
 9ce:	51 e1       	ldi	r21, 0x11	; 17
 9d0:	07 c0       	rjmp	.+14     	; 0x9e0 <__udivmodhi4_ep>

000009d2 <__udivmodhi4_loop>:
 9d2:	aa 1f       	adc	r26, r26
 9d4:	bb 1f       	adc	r27, r27
 9d6:	a6 17       	cp	r26, r22
 9d8:	b7 07       	cpc	r27, r23
 9da:	10 f0       	brcs	.+4      	; 0x9e0 <__udivmodhi4_ep>
 9dc:	a6 1b       	sub	r26, r22
 9de:	b7 0b       	sbc	r27, r23

000009e0 <__udivmodhi4_ep>:
 9e0:	88 1f       	adc	r24, r24
 9e2:	99 1f       	adc	r25, r25
 9e4:	5a 95       	dec	r21
 9e6:	a9 f7       	brne	.-22     	; 0x9d2 <__udivmodhi4_loop>
 9e8:	80 95       	com	r24
 9ea:	90 95       	com	r25
 9ec:	bc 01       	movw	r22, r24
 9ee:	cd 01       	movw	r24, r26
 9f0:	08 95       	ret

000009f2 <_exit>:
 9f2:	f8 94       	cli

000009f4 <__stop_program>:
 9f4:	ff cf       	rjmp	.-2      	; 0x9f4 <__stop_program>
